from log import Handler

c"""source-before-namespace
#include <syslog.h>

static inline void openlog_wrapper(const char *ident, int option, int facility)
{
    openlog(ident, option, facility);
}

static inline void syslog_wrapper(int priority, const char *message_p)
{
    syslog(priority, "%s", message_p);
}

static inline void closelog_wrapper()
{
    closelog();
}

static inline int setlogmask_wrapper(int mask)
{
    return setlogmask(mask);
}
"""

# Levels.
LEVEL_EMERG: i64 = c"LOG_EMERG"
LEVEL_ALERT: i64 = c"LOG_ALERT"
LEVEL_CRIT: i64 = c"LOG_CRIT"
LEVEL_ERR: i64 = c"LOG_ERR"
LEVEL_WARNING: i64 = c"LOG_WARNING"
LEVEL_NOTICE: i64 = c"LOG_NOTICE"
LEVEL_INFO: i64 = c"LOG_INFO"
LEVEL_DEBUG: i64 = c"LOG_DEBUG"

# Facilities.
FACILITY_KERN: i64 = c"LOG_KERN"
FACILITY_USER: i64 = c"LOG_USER"
FACILITY_MAIL: i64 = c"LOG_MAIL"
FACILITY_DAEMON: i64 = c"LOG_DAEMON"
FACILITY_AUTH: i64 = c"LOG_AUTH"
FACILITY_LPR: i64 = c"LOG_LPR"
FACILITY_NEWS: i64 = c"LOG_NEWS"
FACILITY_UUCP: i64 = c"LOG_UUCP"
FACILITY_CRON: i64 = c"LOG_CRON"
FACILITY_SYSLOG: i64 = c"LOG_SYSLOG"
FACILITY_LOCAL0: i64 = c"LOG_LOCAL0"
FACILITY_LOCAL1: i64 = c"LOG_LOCAL1"
FACILITY_LOCAL2: i64 = c"LOG_LOCAL2"
FACILITY_LOCAL3: i64 = c"LOG_LOCAL3"
FACILITY_LOCAL4: i64 = c"LOG_LOCAL4"
FACILITY_LOCAL5: i64 = c"LOG_LOCAL5"
FACILITY_LOCAL6: i64 = c"LOG_LOCAL6"
FACILITY_LOCAL7: i64 = c"LOG_LOCAL7"
FACILITY_AUTHPRIV: i64 = c"LOG_AUTHPRIV"

# Options.
OPTION_PID: i64 = c"LOG_PID"
OPTION_CONS: i64 = c"LOG_CONS"
OPTION_NDELAY: i64 = c"LOG_NDELAY"
OPTION_PERROR: i64 = c"LOG_PERROR"

func openlog(ident: string, option: i64, facility: i64):
    """Opens a connection to the system logger for a program.

    """

    utf8_ident = ident.to_utf8()
    utf8_ident += 0

    c"openlog_wrapper((const char *)utf8_ident.m_bytes->data(), option, facility);"

func syslog(priority: i64, message: string):
    """Generates a log message.

    """

    if (setlogmask(0) & priority) == 0:
        return

    utf8_message = message.to_utf8()
    utf8_message += 0

    c"syslog_wrapper(priority, (const char *)utf8_message.m_bytes->data());"

func closelog():
    """Closes the file descriptor being used to write to the system
       logger.

    """

    c"closelog_wrapper();"

func setlogmask(mask: i64) -> i64:
    """Sets the logmask for the calling process, and returns the previous
    mask.  If the mask argument is 0, the current logmask is not
    modified.

    """

    res: i64 = 0

    c"res = setlogmask_wrapper(mask);"

    return res

func log_upto(level: i64) -> i64:
    """Calculates the mask for all levels up to and including given level.

    """

    mask: i64 = 0

    c"""
    mask = LOG_UPTO(level);
    """

    return mask

class SyslogHandler(Handler):
    """Writes log messages to the system log.

    """

    func write(self, message: string):
        """Writes given log message to the system log.

        """

        syslog(LEVEL_DEBUG, message)

@test
func test_syslog():
    openlog("mys-syslog", 0, FACILITY_USER)
    syslog(LEVEL_WARNING, "Mys testing syslog")
    setlogmask(log_upto(LEVEL_ERR))
    syslog(LEVEL_DEBUG, "Mys testing syslog 2")
    closelog()
